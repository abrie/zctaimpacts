name: Build ZCTAImpacts

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  frontend:
    defaults:
      run:
        working-directory: frontend

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up
      run: yarn
    - name: Test
      run: CI=true yarn test
    - name: Build
      run: yarn build
    - name: Upload frontend artifact
      uses: actions/upload-artifact@v2
      with:
        name: frontend
        path: frontend/build/

  backend:
    defaults:
      run:
        working-directory: backend
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        pytest
    - name: Upload backend artifact
      uses: actions/upload-artifact@v2
      with:
        name: backend
        path: backend/app/

  container:
    needs: [frontend, backend]
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: abriedev/zctaimpacts:latest

    steps:
    - uses: actions/checkout@v2
    - uses: actions/download-artifact@v2
      with:
        name: backend
        path: backend/app
    - uses: actions/download-artifact@v2
      with:
        name: frontend
        path: frontend/build
    - name: Build the container
      run: docker build . --file Dockerfile --tag $IMAGE_NAME --build-arg GITHUB_RUN_NUMBER
    - name: Log into registry
      run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

    - name: Push image to registry
      run: docker push $IMAGE_NAME
